---
title: Using the Pivotal Build Service CLI
owner: Build Service Team
---

This topic describes how to use the Pivotal Build Service CLI, `pb`, to log in to Build Service and manage images, projects, and builds.


## <a id='configure-cli'></a> Log In to Build Service

After you configure and install Build Service, you can use the `pb` CLI to target and log in to your Build Service installation.

For more information, see [Installing and Configuring Build Service](./installing.html). 

To target your Build Service installation and log in:

1. Target the API for your Build Service installation by running:

    ```
    pb api set YOUR-BUILD-SERVICE-API
    ```
    Where `YOUR-BUILD-SERVICE-API` is the URL for the API for your Build Service installation. For example, `https://build-service.example.com`.
    <p class="note"><strong>Note:</strong> Use the <code>--skip-ssl-validation</code> flag if your Build Service installation targets a UAA that has a self-signed CA cert.</p>

1. Confirm that you targeted the correct Build Service installation by running:

    ```
    pb api get
    ```

1. Log in to Build Service by running:

    ```
    pb login
    ```
1. When prompted, enter the `username` and `password` for UAA. 
    <br><br>
    You can also pass your username and password to Build Service by specifying the environment variables `BUILD_SERVICE_USERNAME` and `BUILD_SERVICE_PASSWORD`. The CLI defaults to using them if they exist in the environment.


## <a id='manage-projects'></a> Manage Projects

The following procedures describe how to manage projects and project members with the `pb` CLI.

A `project` is a Build Service entity that uses UAA to provide user access control to images, image configurations, and image builders. For more information, see [Build Service Projects](./index.html#project-config).

### <a id='create-project'></a> Create a Project

To create a new project:

1. Run:

    ```
    pb project create PROJECT-NAME
    ```
    Where `PROJECT-NAME` is a unique name for the project.  

### <a id='targeting-project'></a> Targeting a project

Under the hood, projects map to the Kubernetes namespace concept. Because of this, resources produced by the build service cannot be accessed globally across all the namespaces in the cluster.  

The `pb` CLI makes it easy to specify the desired project.  Run:
    ```
    pb project target <PROJECT-NAME>
    ```
    Where `PROJECT-NAME` is a unique name for the project.

When running commands, Build Service will now assume that you are referring to the specified project.  In order to set a different target project, simply run the command again and specify a different project. 
        
### <a id='manage-project-members'></a> Add and Remove Project Members

All members of a project can add and remove project members. 

#### Add Members to a Project

To add members to a project:

1. Run:

    ```
    pb project user add UAA-USER-EMAIL
    ```

    Where:
    * `UAA-USER-EMAIL` is the email address for the user. The user email address must be in UAA to add the user to a project.

#### Remove Members of a Project

To remove members of a project:

1. Run:

    ```
    pb project user remove UAA-USER-EMAIL 
    ```
    Where:
    * `UAA-USER-EMAIL`: Is the email address for the user.

### <a id='manage-image-registries'></a> Manage Image Registries for a Project

For a project to use an image registry in Build Service, you must associate an image registry and the image registry credentials with the project. If the source code for the image is saved in a private git repository, you must also associate the Git credentials with the project.

Build Service uses these credentials to deliver container image builds to the specified registry. 

<p class="note"><strong>Note:</strong> The registry credentials must belong to a user with <code>write</code> access on the registry.</p> 

Build Service supports the following image registries:

* Docker Hub   
* GCR
* Harbor
* Artifactory

#### <a id='add-image'></a> Associate an Image Registry with a project

To associate an image registry and image registry credentials with a project:

1. Create a YAML file with the image registry location and credentials. Enter the following variables:

    ```
    registry: REGISTRY-DOMAIN
    username: REGISTRY-USERNAME
    password: REGISTRY-PASSWORD
    ```
    Where:
    * `REGISTRY-DOMAIN` is the domain for the registry. Use the following guidance to complete the `registry` field, depending on your image registry:
      * **Docker Hub**: Enter `index.docker.io`.  
      * **GCR**: Enter `gcr.io`.
      * **Harbor**: Enter the domain that is specific to your deployment of the registry.
      * **Artifactory**: Enter the domain that is specific to your deployment of the registry
    * `REGISTRY-USERNAME` and `REGISTRY-PASSWORD` are the username and password of the image registry, respectively. You can include only one password for an image registry in the credentials YAML file.

1. Apply the image registry YAML file by running:

    ```
    pb secrets registry apply -f PATH-TO-REGISTRY-CREDENTIALS-YAML
    ```
    Where `PATH-TO-REGISTRY-CREDENTIALS-YAML` is the local path to the YAML file that you created in the previous step.

#### <a id='change-registry-association'></a> Change Image Registry Association and Credentials

To update the registry association and credentials for a project:

1. Modify the variables in your image registry YAML file.
    * To change the registry associated with the project, modify `registry`.
    * To change the credentials for the registry, modify `username` and `password`.

1. Apply the image registry file by running:

    ```
    pb secrets registry apply -f PATH-TO-REGISTRY-CREDENTIALS-YAML
    ```
    Where `PATH-TO-REGISTRY-CREDENTIALS-YAML` is the local path to the YAML file that you created in the previous section.

### <a id='manage-git-repos'></a> Manage Git Repositories for a Project

To allow Build Service to execute builds against app source code in a private Git repository, you must add the Git username and password (or access token) to the project that manages the source code.

As you apply YAML files that associate a Git repository and Git repository credentials with a project, the `pb` CLI provides feedback indicating whether or not the commands succeeded.

#### <a id='add-git-credentials'></a> Associate a Git Repository with a project

To associate a Git repository and Git repository credentials with a project:

<p class='note'><strong>Note:</strong> If your git repository uses an access token, you can specify the token in the below `password` field. For more information, see <a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line">Creating a personal access token for the command line</a> in the GitHub documentation.</p>

1. Create a YAML file with the Git repository location and credentials. Enter the following variables:

    ```
    repository: GIT-REPOSITORY
    username: GIT-USERNAME
    password: GIT-PASSWORD/TOKEN
    ```
    Where:
    * `GIT-REPOSITORY` is the URL of the GitHub repository.
    * `GIT-USERNAME` is the Git username used to access the GitHub repository.
    * `GIT-PASSWORD/TOKEN` is the password or access token used to access the GitHub repository.

1. Apply the Git repository file to the project by running:
    
    ```
    pb secrets git apply -f PATH-TO-REPOSITORY-CREDENTIALS-YAML-FILE
    ```
    Where `PATH-TO-REPOSITORY-CREDENTIALS-YAML-FILE` is the local path to the YAML file that you created in the previous step.

#### <a id='change-repo-association'></a> Change Git Repository Association and Credentials

To update the Git repository and credentials for a project:

1. Modify the variables in your Git repository YAML file.
    * To change the Git repository associated with the project, modify `repository`.
    * To change the credentials for the Git repository, modify `username` and `password`.

1. Apply the git repository  file by running:

    ```
    pb secrets registry apply -f PATH-TO-REPOSITORY-CREDENTIALS-YAML-FILE
    ```
    Where `PATH-TO-REPOSITORY-CREDENTIALS-YAML-FILE` is the local path to the YAML file that you created in the previous step.

#### <a id='delete-git-creds'></a> Delete Git Credentials from a Project

To delete Git credentials from a project:

1. Run:

    ```
    pb secrets git delete github.com 
    ```

### <a id='delete-project'></a> Delete a project

This procedure describes how to delete a project using the `pb` CLI.

<p class="note warning"><strong>Warning:</strong> If you delete a project, all registry credentials and Git secrets associated with that project will also be deleted.</p>

To delete a project:

1. Delete any image configs in Build Service owned by the project. You cannot delete a project if the project owns any images on Build Service.

1. Run:

    ```
    pb project delete 
    ```

## <a id='manage-images'></a> Manage Images

The following procedures describe how to create and manage images in Build Service.

### <a id='create-image'></a> Image Configurations 

To create an image, you must create an image configuration YAML that includes the following properties:

* `source`: Defines the Git location of the code that the image is built against. The `revision` can be either a `branch`, `tag` or a commit `sha`. When you target the image against a branch, Build Service triggers a build for every new commit.

* `build`: Defines additional configuration for your app such as buildpack version numbers.
  - Includes an `env` property that supplies values to the build by setting environment variables.
  - Each `env` environment variable is an object with a `name` and a `value`, for example `BP_JAVA_VERSION` and `8.*`.

* `image`: Defines the destination registry of the builds for the image. You must specify the credentials for the target registry in the `registries` section of the project configuration. For more information, see [Manage Image Registries for a Project](#manage-image-registries). The value for `image` must match the domain of one of the registries that you provided in the project configuration. Build Service uses the value of `image.tag` to refer to the image after it is created. If you update the image `tag`, Build Service creates a new image.

For more information about creating and applying image configurations for apps with source code in GitHub or source code saved locally, see [Apply Image Configurations](#apply-image).

### <a id='apply-image'></a> Apply Image Configurations

Build Service supports builds against apps with source code that is saved in a Git repository or saved on your local machine. You can specify only one location for app source code. 

The procedures in this section describe how to apply image configurations in Build Service that have source code saved in a Git repository or source code saved locally. 

#### <a id='apply-image-with-git-repo'></a> Apply an Image With Source Code in a Git Repository

To apply an image configuration to Build Service:

1. Create an image configuration YAML file. For example:

    ```
    source:
      git:
        url: https://github.com/PATH-TO-EXAMPLE-APP
        revision: master
    build:
      env:
      - name: ENV-NAME
        value: ENV-VALUE
    image:
      tag: REGISTRY-DOMAIN/PATH-TO-EXAMPLE-APP-IMAGE
    ```

    Where:
      * `PATH-TO-EXAMPLE-APP` is the path to an app on GitHub.
      * `ENV-NAME` is the name of your build environment.
      * `ENV-VALUE` is the value of your build environment.
      * `REGISTRY-DOMAIN` is the domain for the registry. Use the following guidance to complete the `registry` field, depending on your image registry:
        * **Docker Hub**: Enter `index.docker.io`.  
        * **GCR**: Enter `gcr.io`.
        * **Harbor**: Enter the domain that is specific to your deployment of the registry.
        * **Artifactory**: Enter the domain that is specific to your deployment of the registry
      * `PATH-TO-EXAMPLE-APP-IMAGE` is the local path to the image registry.

1. Apply the image configuration by running:

    ```
    pb image apply -f PATH-TO-IMAGE-CONFIGURATION
    ```
    Where `PATH-TO-IMAGE-CONFIGURATION` is the local path where you saved the image configuration YAML file.

#### <a id='apply-image-with-local-source-code'></a> Apply an Image With Local Source Code

To apply an image configuration that uses local source code:

1. Create an image configuration file that has no Git properties. For example:

    ```
    build:
      env:
      - name: ENV-NAME
        value: ENV-VALUE
    image:
      tag: REGISTRY-DOMAIN/PATH-TO-EXAMPLE-APP
    ```
    Where:
    * `PATH-TO-EXAMPLE-APP` is the local path to an app.
    * `ENV-NAME` is the name of your build environment.
    * `ENV-VALUE` is the value of your build environment.
    * `REGISTRY-DOMAIN` is the domain for the registry. Use the following guidance to complete the `registry` field, depending on your image registry:
      * **Docker Hub**: Enter `index.docker.io`.  
      * **GCR**: Enter `gcr.io`.
      * **Harbor**: Enter the domain that is specific to your deployment of the registry.
      * **Artifactory**: Enter the domain that is specific to your deployment of the registry

1. Apply the image configuration by running:

    ```
    pb image apply -f /PATH-TO-IMAGE-CONFIGURATION/IMAGE-CONFIGURATION.yaml -p /PATH-TO-APP-DIRECTORY
    ```
    Where:
    * `PATH-TO-IMAGE-CONFIGURATION` is the local path to the image configuration YAML file.
    * `IMAGE-CONFIGURATION` is the name of the image configuration YAML file. 
    * `PATH-TO-APP-DIRECTORY` is the local path to the app directory.

### <a id='rebuild-image'></a> Image Rebuilds

Rebuilds happen in two ways. An imperative rebuild occurs when you make edits to the image configuration and run `pb image apply`. An automatic rebuild occurs when build inputs change, without you editing the image configuration itself.

You can initiate an imperative rebuild in the following ways:

* You update the commit, branch, Git repository, or build fields on the image's configuration file and re-apply it by running `pb image apply`.

* You upload a new copy of the local source code by running `pb image apply -p`.

For more information, see [Apply Image Configurations](#apply-image).

Build Service auto-rebuilds images when one or more of the following build inputs change:

* New buildpack versions are made available through an updated builder image. The Build Service Bundle on Pivotal Network includes the latest buildpacks in its builder images. When you update Build Service, it copies the new buildpacks over to your container registry.

* There is a new commit on a branch or tag Build Service is tracking.

* There is a new base OS image available such as `cflinuxfs3`
        

### <a id='monitor-builds'></a> Monitor Builds for an Image

The procedures in this section describe how to view information and logs for image builds.

Build Service stores the ten most recent successful builds and the ten most recent failed builds.

To view logs for a build, you must provide the build number. You cannot view logs for a build by referencing the image digest.

#### <a id='view-all-builds'></a> View All Builds for an Image

To list all the builds created for an image, run:

```
pb image builds IMAGE-TAG 
```
Where `IMAGE-TAG` is the value of the field `image.tag` in the image configuration YAML file.

The following is an example of the output for this command:

```
Build    Status    Started Time           Finished Time          Reason    Digest
-----    ------    ------------           -------------          ------    ------
    1    SUCCESS   2019-09-09 21:55:27    2019-09-09 21:56:54    CONFIG    *************************************************
    2    SUCCESS   2019-09-09 21:56:55    2019-09-09 21:57:40    COMMIT    *************************************************
    3    SUCCESS   2019-09-09 21:56:56    2019-09-09 21:57:41    STACK     *************************************************
    5    FAILED    2019-09-09 21:58:57    2019-07-08 21:59:41    CONFIG+   --
    4    BUILDING  2019-09-09 21:58:58    --                     BUILDER   --
    -    PENDING   --                     --                     UNKNOWN   --
```

The following describes the fields in the example output:

* `Build`: Describes the index of builds in the order that they were built.
* `Status`: Describes the status of a previous or pending build image.
* `Started Time` and `Finished Time`: Describe when a build started and finished.
* `Reason`: Describes why an image rebuild occured. These reasons include:
    * `CONFIG`: Occurs when a change is made to commit, branch, Git repository, or build fields on the image's configuration file and the user ran `pb image apply`.
    * `COMMIT`: Occurs when new source code is committed to a branch or tag build service is monitoring for changes.
    * `BUILDER`: Occurs when new buildpack versions are made available through an updated builder image.
        <p class="note"><strong>Note:</strong> It is possible for a rebuild to occur for more than one <code>Reason</code>. When there are multiple reasons for rebuild, the <code>pb</code> CLI output shows the primary reason and appends a <code>+</code> sign to the <code>Reason</code> field. The following is the priority rank for the <code>Reason</code>:<code>CONFIG</code>, <code>COMMIT</code>, <code>BUILDER</code>, in descending order.</p>
    * `STACK`: Occurs when a new base OS image (called a `run image`) is available.     
* `Digest`: Contains the `SHA256` of the successfully built image. You can reference this SHA to perform Docker commands like `pull` and `inspect`.

### <a id='view-build-logs'></a> View Logs for a Build

To view logs for a build, run:

```
pb image logs IMAGE-TAG -b BUILD-NUMBER
```
Where:

* `IMAGE-TAG` is the value of the field `image.tag` in the image configuration YAML file.
* `BUILD-NUMBER` is the number of the build.

The following is an example of the output of the command:

```
[build-step-credential-initializer] {"level":"info","ts":1562684107.3441668,"logger":"fallback-logger","caller":"creds-init/main.go:40","msg":"Credentials initialized.","commit":"002a41a"}
[build-step-credential-initializer]
[build-step-git-source-0] git-init:main.go:81: Successfully cloned "https://github.com/buildpack/sample-java-app" @ "abde24efc17802b7e2b3814e0ead63a460e66f5f" in path "/workspace"
[build-step-git-source-0]
[build-step-prepare]
[build-step-detect] Trying group 1 out of 3 with 27 buildpacks...
[build-step-detect] ======== Results ========
[build-step-detect] skip: Cloud Foundry Archive Expanding Buildpack
[build-step-detect] pass: Pivotal OpenJDK Buildpack
[build-step-detect] pass: Pivotal Build System Buildpack
[build-step-detect] pass: Cloud Foundry Spring Boot Buildpack
[build-step-detect] pass: Cloud Foundry Apache Tomcat Buildpack
...
[build-step-detect] skip: Cloud Foundry JMX Buildpack
[build-step-detect] pass: Cloud Foundry Spring Auto-reconfiguration Buildpack
[build-step-detect]
[build-step-restore] Restoring cached layer 'io.pivotal.openjdk:openjdk-jdk'
...
[build-step-restore] Restoring cached layer 'org.cloudfoundry.springboot:spring-boot'
[build-step-restore]
[build-step-analyze] Analyzing image 'registry.com/sample/demo@sha256:8ff708081ee10f7039f77275f1e6eb6359cae8d90028c79a5c493ced0dc63f68'
[build-step-analyze] Using cached layer 'io.pivotal.openjdk:openjdk-jdk'
...
[build-step-analyze] Rewriting metadata for layer 'org.cloudfoundry.springboot:spring-boot'
[build-step-analyze] Writing metadata for uncached layer 'io.pivotal.clientcertificatemapper:client-certificate-mapper'
[build-step-analyze] Writing metadata for uncached layer 'org.cloudfoundry.springautoreconfiguration:auto-reconfiguration'
[build-step-analyze]
[build-step-build]
[build-step-build] Pivotal OpenJDK Buildpack 1.0.0-M9
[build-step-build]   OpenJDK JDK 11.0.3: Reusing cached layer
[build-step-build]   OpenJDK JRE 11.0.3: Reusing cached layer
[build-step-build]   JVMKill Agent 1.16.0: Reusing cached layer
[build-step-build]   Class Counter 1.0.0-M9: Reusing cached layer
[build-step-build]   Memory Calculator 4.0.0: Reusing cached layer
[build-step-build]
...
[build-step-build]     task:        java -cp $CLASSPATH $JAVA_OPTS io.buildpacks.example.sample.SampleApplication
[build-step-build]     web:         java -cp $CLASSPATH $JAVA_OPTS io.buildpacks.example.sample.SampleApplication
[build-step-build]
[build-step-build] Pivotal Client Certificate Mapper Buildpack 1.0.0-M9
[build-step-build] Cloud Foundry Spring Auto-reconfiguration Buildpack 1.0.0-M9
[build-step-build]   Spring Auto-reconfiguration 2.7.0: Reusing cached layer
[build-step-build]
[build-step-export] Reusing layers from image 'index.docker.io/matthewmcnew/demo@sha256:8ff708081ee10f7039f77275f1e6eb6359cae8d90028c79a5c493ced0dc63f68'
[build-step-export] Reusing layer 'app' with SHA sha256:02e0070ce11bac1829174ec1296dcb1f3f04a4c30a958e2c41ad5498f78898fe
...
[build-step-export] Reusing layer 'org.cloudfoundry.springautoreconfiguration:auto-reconfiguration' with SHA sha256:93d94baf6d0dfc4981eb7d8ddfc4ae51f5c13cf87789b64ae8c4b015318a1b43
[build-step-export] *** Images:
[build-step-export]       registry.com/sample/demo:latest - succeeded
[build-step-export]       registry.com/sample/demo:b2.20190709.145448 - succeeded
[build-step-export]
[build-step-export] *** Digest: sha256:48a4ca8e4d8e8a9af26437588d0ce0e9d5c09b53aeb3ef64230a3d58d4b0dc90
[build-step-export]
[build-step-cache] Reusing layer 'io.pivotal.openjdk:openjdk-jdk' with SHA sha256:5554c7c06a266eb44a7cbdf0ecfaa14070e21af2b0bdfd1edd3b96f5168cd511
[build-step-cache] Reusing layer 'io.pivotal.buildsystem:build-system-cache' with SHA sha256:3b03fdd870a2dc1e924a040b604c25b76efafc1324ceb08eae8eae686fc3a940
...
[build-step-cache] Reusing layer 'org.cloudfoundry.springboot:spring-boot' with SHA sha256:effa8b80729cafa9f9a01b21a4badb5203510de0bb2e6b309ffd2593b0a28de7
[build-step-cache]
```

#### <a id='view-running-build-logs'></a> View Logs for a Running Build

You can stream logs that show the progress of a build. The logs terminate when the build completes.

To view logs for a running build:

1. Run:

    ```
    pb image logs IMAGE-TAG -b BUILD-NUMBER -f
    ```
    Where:

    * `IMAGE-TAG` is the value of the field `image.tag` in the image configuration YAML file.
    * `BUILD-NUMBER` is the number of the build.

### <a id='delete-images'></a> Delete an Image

This procedure describes how to delete a Build Service image. 

<p class="note warning"><strong>Warning:</strong> Deleting an image also deletes all the builds that the image owns. It does not delete the images generated by those builds.</p>

To delete an image:

1. Run:

    ```
    pb image delete IMAGE-TAG
    ```
    Where `IMAGE-TAG` is the value of the field `image.tag` in the image configuration YAML file.

1. View the following success message:

    `Successfully deleted image IMAGE-TAG`
